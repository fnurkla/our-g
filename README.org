* Things to do

** DONE Make sure that both pis can talk to both of the radio trancievers

- [X] inuti23
  - [X] bus 0
  - [X] bus 1
- [X] inuti40
  - [X] bus 0
  - [X] bus 1

** TODO Make a decision about what libraries to use

*** DONE Try the Go library again.
CLOSED: [2024-03-26 Tue 14:31]
When we tried this at first, we used incorrect pins.

After trying it again, there seems to be issues with the library (it tries to
wrap a Go pointer as a C pointer and panics).

*** DONE Try the Python libraries again
CLOSED: [2024-03-26 Tue 14:47]
They did not work.

*** DONE Investigate the C/C++ example we got to work earlier
CLOSED: [2024-04-17 Wed 15:08]
We seem to be making progress with this.  We install the =RF24= library through
the provided =install.sh=.  This puts them in =/usr/local/{include|lib}=.

The c-wrapper files are placed in the same directories.

*** TODO Redo build system

*** DONE Check radio frequencies
CLOSED: [2024-04-17 Wed 16:01]
We have switched to channel 111.

*** DONE Check radio powers
CLOSED: [2024-04-17 Wed 16:02]
We can now change it easily.  This turned out to not be the problem, so we stay
at low power; for testing at least.

*** TODO Research NAT and routing

*** TODO Research control plane

* Diary

** 2024-03-26
We had trouble getting any of the python examples of of Canvas to work.

Eventually we got [[https://nrf24.github.io/RF24/md_docs_linux_install.html][the C++ example in the nrf24 documentation]] to communicate with
the transciever on the =inuti23= pi, but only on bus 1.  To do so, we needed to
set the ~CE_PIN~ to 27 and the ~CSN_PIN~ to 10 (decimal).

After testing the same code on the =inuti40= pi, bus 0 (~CE_PIN~ = 17 and ~CSN_PIN~ =
0) also worked.  This indicates that something is wrong with the ~inuti23~ pi.

After a reboot, both busses worked on the inuti23 pi as well :).

We also tried some Go and Python libraries, neither of which worked.

** 2024-04-15
We should take the rf24c from the rf24-go repo and use as the interface between
C and the C++ library.

We can use POSIX threads, separate for the Rx and the Tx side.  They will likely
need a way to communicate.  How?

IP packets can cleanly be split into 32 bit lines.  We can try this simple
approach to start.

We should try to get solid communication between the pis next.  This means base
station recieving the mobile unit's communincation without recieving it
themselves, and vice versa.

We tried to rewrite the C/C++ example from nrf24 with the rf24c wrapper.  It
works we think.  We haven't tested it on the actual hardware yet...

** 2024-04-17
We had build troubles with the C wrapper and the RF24 library.  We solved them.

From yesterdays lecture we determined that we want to run the uplink and
downlink at different frequencies so that we do not interfere with ourselves.
This might also be our problem with communicating between the pis? That they're
running on different frequencies that is.

*** The plan

On both sides we need a sender and a reciever process/thread.

The sender process will
- Read from the Virtual interface
- Fragment the packages
- Send the fragments over the radio

The reciever process will
- Listen to the radio
- Defragment the packages
- Write to the virtual interface

*** NAT
NAT will be needed so that the base station knows where packages are to be sent.
How to do that will need to be investigated.

*** Goal UX
On the base station
#+begin_src bash
./base_station
#+end_src
This would maybe then set up all the routing stuff as well.

On the mobile unit
#+begin_src bash
./mobile_unit
#+end_src
